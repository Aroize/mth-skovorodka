# <a id="_heading=h.gjdgxs"></a> Облачные вычисления и центры обработки данных

# <a id="_heading=h.30j0zll"></a>Центры Обработки Данных

Быстрое распространение Интернета, Всемирной Паутина \(WWW\), системы обмена сообщениями \(мессенджеры\), возникновение социальных сетей предъявили новые требования к организации вычислений для поддержки услуг\.  Пользователи стали требовать, чтобы услуги всегда были доступны там, где они нуждаются в них\. Поток запросов на услуги не равномерен\. Например, по данным компании Facebook на 2010 г\. среднее число пользователей, одновременно находившихся в системе Facebook, оценивалось в 25 млн\. человек, разбросанных по всему Земному шару\. Однако в пике их число в разы превышало эту среднюю оценку и падало до нескольких тысяч в ночное время\. Обслуживание таких запросов требовало умения масштабировать вычислительные мощности, выделяемые сервису, в зависимости от потока запросов к нему, умения динамически перераспределять вычислительные мощности в зависимости, например, от времени суток и географического положения пользователей \(где\-то день, а где\-то ночь\)\. 

	Клиент\-серверная архитектура, которая активно развивалась в 80\-е и 90\-е годы не удовлетворяла этим требованиям\. В ней каждое приложение жестко было привязано к конкретному вычислителю \(серверу\), мощность которого была ограничена и быстро увеличить ее, или как еще говорят, масштабировать, не останавливая работу вычислителя, не представлялось возможным\. Решением проблемы масштабирования стали центры обработки данных, соединенные быстрыми каналами связи \(часто беспроводными\) с пользователями, и облачные вычисления\.

Центр обработки данных \(ЦОД\) генерирует поток услуг по запросу пользователей\. Внешне ЦОД часто похож на невзрачное здание, похожее на склад, не неся при этом никаких признаков того, что находится внутри\. Внутри гул вентиляторов, охлаждающих стойки с компьютерами\. Каждая стойка размера с бытовой холодильник образует кластер\. Кластеры вплетены в «кружево» из электрических и оптических кабелей, которые образуют сеть, соединяющую компьютеры в кластер, кластеры между собой и с внешним миром\. Например, у компании Google в шести ЦОД’ах, разбросанных по всем континентам, работает более 500 млн\. серверов\. 

 	 

Каждый кластер является однородным в том смысле, что все сервера одинаковы как по архитектуре, так и по скорости\. Эти тысячи серверов используются для распределенной, параллельной обработки запросов на уровне процессов специального вида, так называемых, нитей \(threads\)\. Каждый запрос представляет собой задачу, которая разбивается на подзадачи\. Процесс может охватывать как все подзадачи одного запроса, так и лишь одну конкретную подзадачу\. Все задачи и подзадачи выполняются параллельно на одном и том же сервере, либо на разных серверах\. Обработка заканчивается, когда выполнены все подзадачи одного запроса\. При такой организации обработки, максимальное время выполнения одной подзадачи будет определять время всей задачи, т\.е\. реакции на запрос пользователя\.   

Даже при массовом параллелизме, когда число серверов достигает десятков и сотен тысяч, на уровне процессов накладные расходы на их взаимодействие через сеть и стек протоколов взаимодействия, т\.е\. программы реализующие протоколы сетевого взаимодействия, могут существенно ограничить общую производительность приложения из\-за эффекта закона Амдала\. Таким образом, архитектура ЦОД и архитектура программного приложения определяют то насколько эффективно будет работать приложение\. 

Способ использования кластера имеет определяющее влияние на соблюдение требований к сервисам \(Service Level Agreement – SLA\) и, в конечном итоге, на производительность приложения\. Кроме ЦОД есть другой вид высокопроизводительных вычислителей \- массивно параллельные суперкомпьютеры \(НРС– High Performance Computer\), состоящие из тысяч компьютеров, работающих параллельно\. Высокопроизводительные вычислители НРС основаны на быстрой и эффективной системе межкомпьютерных соединений, которая обеспечивала высокую скорость передачи небольших порций данных – сообщений\. Кластер может быть использован в выделенном режиме только одним приложением, либо режиме разделения несколькими приложениями\. Приложения для HPC обычно используют кластер в выделенном режиме, чтобы избежать конкуренцию за ресурсы между несколькими приложениями\.  Эта конкуренция требует специальных механизмов урегулирования, и всегда влияет на производительность приложений\. Поэтому YHC системы не применяют там, где потоки запросов динамично меняются, что типично для таких сервисов как социальные сети, Web\-сервисы, поисковики\.

С другой стороны, многие Web приложения используют сервисы от множества других кластеров, на которых, с целью повышения общей загруженности ресурсов всей системы, могут одновременно работать несколько приложений\. Поэтому в ЦОД, как в системе кластеров, используют виртуализацию и масштабирование для изоляции приложений как по производительности, так и с целью отсутствия взаимного влияния от ошибок\.

Под Web\-приложения, такие как поисковики, электронная почта, и совместная работа с документами планируют ресурсы и запускают в кластере\. Приложения, имеющие интерфейс с пользователем, работают в режиме мягкого времени – у них есть с десяток миллисекунд для ответа на запрос пользователя\. Выполнение запроса распределяется между несколькими рабочими процессами в кластере\. Рабочие процессы генерируют частные ответы, которые агрегируют и отправляют пользователю\.  

Если часть рабочих процессов не заканчивает свою работу своевременно, например, из\-за перегрузки в сети, то задержка может превысить допустимый порог\. Это приведет к тому, что результаты некоторых рабочих процессов не будут агрегированы с результатами остальных рабочих процессов, что приведет к пустой трате вычислительных и сетевых ресурсов и может не благоприятно сказаться на финальном результате\. 

Для того, чтобы уменьшить вероятность перегрузки, сеть может быть overprovisioned, т\.е\. сетевых ресурсов может быть запрошено по максимуму, чтобы гарантированно обеспечить достаточную пропускную способность для даже самых экзотических моделей трафика\. Overprovisioning в рамках крупномасштабных сетей ЦОД является крайне дорогим приемом\. 

Другой подход состоит в реализации нескольких политик обеспечения качества сервисов \(QoS – Quality of Service\), ориентированных на различные классы трафиков\. Трафики разных классов для обеспечения гарантированной производительности изолируют друг от друга, применяя разные техники трафик инжиниринга\.  Такой подход позволяет гарантировать требования SLA для приложений\. Большинство политик обеспечения QoS реализуются с помощью оборудования коммутаторов и NIC \(сетевого интерфейса\), где трафик разделяют на основе приоритетов, явно указанных, в виде меток маршрутизаторов или хостов, или неявно заданных через диапазон портов коммутатора\. Цель одна – обеспечить высокопроизводительную сеть с предсказуемой задержкой и пропускной способностью для разнообразных типов трафика\.

# <a id="_heading=h.1fob9te"></a>Облачные вычисления \(Cloud Computing\)

Облачные вычисления — технология распределённой обработки данных, в которой вычислительные, сетевые и ресурсы хранения предоставляются пользователю как сервис\. Чаще всего пользователю не надо иметь компьютер\. Ему нужен сервис по обработке данных, доступу к информации, возможности посмотреть в графическом виде результаты расчетов и т\.д\. 

Физической инфраструктурой для облачных вычислений является ЦОД\. Пользователь не знает, да, ему и не нужно знать, на каких конкретных физических ресурсах и где расположен тот ЦОД, на ресурсах которого реализован сервис, которым он пользуется в данный момент\. Причем предоставление пользователю услуг, как сервис, является ключевым\. Здесь можно провести прямую аналогию с электричеством\. Когда мы втыкаем вилку в розетку мы не задумываемся где расположен источник электроэнергии, которую мы получаем из розетки\. В случае облачных вычислений ситуация аналогична, мы обращаемся за вычислительными услугами, ресурсами т\.д\., при этом нам безразлично где физически располагается источник услуг или соответствующий ресурс\. Волшебство облака заключается в том, что его услуги доступны всегда и везде\.

Существуют три основных режима предоставления облачных сервисов: Infrastructure\-As\-A\-Service, Platform\-As\-A\-Service и Software\-As\-A\-Service\. В настоящее время существует широкая таксономия терминов, сужающих контекст, например, MBaaS \(Mobile\-Backend\-As\-A\-Service\) и Metal\-As\-Service, VNFaaS, NFVIaaS, но в общем смысле все сводится к этим трем\. 

В режиме Infrastructure\-As\-A\-Service \(IaaS\) пользователь получает виртуальную инфраструктуру: набор виртуальных машин нужной производительности, виртуальных каналов связи, соединяющих нужным пользователю образом его виртуальные машины, виртуальные хранилища данных \(виртуальные диски\), нужного пользователю объема\. Установка приложений на эти виртуальные машины, политики маршрутизации данных в виртуальной сети и т\.д\. – это все возлагается на самого пользователя\.

В режиме Platform\-As\-A\-Service \(PaaS\) облако предоставляет пользователям группу услуг, которые позволяют им абстрагироваться от инфраструктуры приложений, операционной системы, промежуточного ПО, а также предоставляет группам разработчиков способность получать ресурсы, разрабатывать, собирать, тестировать и разворачивать свои приложения без помощи ИТ\-специалистов\. PaaS упрощает развертывание приложений при помощи самообслуживания, инструментов, выделяемых по требованию, ресурсов, автоматизации и контейнера среды выполнения, размещенного на платформе\. Это устраняет необходимость в средствах развертывания, а разработчикам больше не потребуется заниматься настройкой и при каждой смене фазы жизненного цикла приложения и ждать, пока физические серверы или виртуальные машины скопируют файлы из одной среды в другую\. Например, предоставление доступа к такой системе как 1С в режиме PaaS означает, что пользователь не заботиться об инфраструктуре, необходимой для работы этой платформы, а сосредоточен лишь на настройке этой системы под свои нужды и повседневной эксплуатации настроенной системы, т\.е\. поддержке актуальности, сохранности и безопасности данных, формировании нужных отчетов и форм и т\.п\. 

В режиме SaaS программное обеспечение как услуга \(также software on demand — программное обеспечение по требованию\) — бизнес\-модель продажи и использования программного обеспечения, при которой пользователь получает доступ к нужному приложению через Интернет\. Например, если нужно поработать с текстом, то сам текстовый редактор нам не нужен\.  Нужен сервис по набору и редактированию текстов, их верстке, а не само программное обеспечение, которое реализует эти услуги\. Поэтому выгоднее и проще арендовать на время нужное программное обеспечение, а все проблемы, связанные с обеспечением этого приложения нужными ресурсами, его работоспособностью, надежным функционированием и т\.п\., оставить тому, кто владеет этим приложением\. 

Важно заметить, что эти три режима предоставления сервисов могут существовать отдельно или в комбинации друг с другом: предложения типа SaaS необязательно могут быть разработаны над предложениями PaaS, так как решения, основанные на использовании PaaS, часто предоставляются как SaaS, предложения же типа PaaS – больше, чем просто работающая на IaaS платформа\. Симбиоз трех методов поставки облачных сервисов, разумеется, должен предваряться серьезным анализом и часто целым переосмыслением архитектуры сервиса, который должен работать в облаке\.

Основной технологией, давшей стимул в развитии облачных вычислений, является виртуализация\. Под термином виртуализация понимают технику динамического создания логического объекта, функционально эквивалентного соответствующему физическому ресурсу\. Например, виртуальная вычислительная машина \- это программная имитация с помощью специального программного обеспечения аппаратных ресурсов компьютера: процессор, память, жесткий диск, и т\.д\. Далее, на такую виртуальную машину можно установить операционную систему, и она будет на нем работать точно так же, как и на простом, «железном» компьютере\. Самое интересное достоинство этой технологии – это возможность запуска нескольких виртуальных машин внутри одного «железного» компьютера, при этом все виртуальные машины могут работать независимо друг от друга точно так же как несколько разных программ работают на одном и том же физическом компьютере\. 

Технология виртуализации повышает эффективность использования вычислительных и сетевых ресурсов благодаря возможности быстро развернуть несколько виртуальных объектов вместо одного физического или переместить, или, как говорят, мигрировать виртуальный объект на другой физический\. Например, виртуализация позволяет развернуть несколько виртуальных машин на одном физическом процессоре, сопоставить несколько виртуальных каналов передачи данных одному и тому же физическому каналу и т\.п\. То есть там, где раньше требовалось несколько серверов – теперь можно поставить один сервер, и запустить нужное число гостевых ОС в виртуальной среде\.  Возможности современных систем виртуализации позволили достигнуть существенного прогресса в плане масштабирования, отказоустойчивости, различных видов оптимизаций\.

Физические сервера, на которых запускаются виртуальные машины, могут быть объединены в кластер, и в случае отказа одного из серверов – автоматически мигрировать на другой\. Полной отказоустойчивости добиться не всегда возможно, но возможные простои сильно сократятся: миграция занимает несколько минут, тогда как ремонт или замена самого сервера может занять часы, а то и дни\.

Термин «облако» приобрел известность где\-то вначале 2000\-х\. Однако все технологии, которые сегодня входят в состав облачной парадигмы, существовали и раньше, однако на рынке не было предложений, которые бы объединяли перспективные технологии в едином коммерчески привлекательном решении\. Начиная с где\-то с 2010\-го появились публичные облачные сервисы, благодаря которым эти технологии стали, с одной стороны, доступны широкой публике, а с другой — их экономика стала понятна для бизнеса\.

Концепции проектов, которые можно считать прародителями привычных нам «облачных» сервисов, появились в 80\-х годах прошлого века\. Именно тогда разработчики программного обеспечения предложили такую модель приложений, где все вычисления и обработка информации осуществляются не на компьютере пользователя, а на удаленных серверах, соединенных локально с компьютером пользователя\. Глобальной сети Интернет в то время не существовало, поэтому первые идеи «облаков» оказались трудно реализуемыми и практически не использовались при создании новых программ\.

Как уже было сказано, одной из наиболее существенных технологических новаций, лежащих в основе облачных вычислений, являются технологии виртуализации\. Впервые виртуализация была предложена в середине 1960‑х годов применительно к основной памяти компьютера\. Тогда были придуманы и реализованы механизмы виртуализации памяти \(см\. раздел Вычислители\)\. 

Следующими важнейшими вехами в истории концепции облачных вычислений стало заявление Джона МакКарти, компьютерный исследователь, известный своими разработками \(создатель термина "Artificial Intelligence" и языка программирования Lisp\), о том, что "вычислительные мощности могут когда\-нибудь стать публично доступными ресурсами", и выпуск в 1966 году книги Дугласа Пархилла "The Challenge of the Computer Utility", в которой он описал практически все основные характеристики существующих сегодня облаков, а также впервые употребив сравнение с электрической сетью\.

Первой компанией, в полной мере, осознавшей коммерческую перспективу общедоступных технологий виртуализации, стала компания Amazon\. В 2006 году компания представила своим клиентам разветвленную систему веб\-сервисов\. Принципиальное отличие новой инфраструктуры состояло в том, что пользователи получали в распоряжение не только ресурсы для хранения данных, но и вычислительные мощности серверов, принадлежащих Amazon\. Хороший пример оказался заразительным — буквально через год похожие услуги предложили флагманы IT\-индустрии: Google, Sun и IBM\. 

Основное отличие «облачного» программного решения от обычного в том, что вся информация, с которой Вы работаете, сохраняется не на Вашем жестком диске, а на удаленном сервере\. Аналогично с производимыми операциями: они нагружают не персональный компьютер или ноутбук, а мощности серверов компании, предоставляющей то или иное приложение\. Вы же получаете лишь результат, отправляемый на монитор через интернет\.

Яркий пример «облачного» программного обеспечения — комплекс сервисов от Google: электронная почта Gmail, приложение для обработки текстовых файлов Google Docs, автопереводчик Google Translate, картографический сервис Google Maps, мессенджер Google Talk и другие, не менее полезные программы\. Для того чтобы получить возможность ими пользоваться, необходимо создать лишь одну учетную запись\. Все данные, с которыми Вы будете работать после этого, сохраняются в серверной сети Google и импортируются во все используемые сервисы \(например, тех, кому Вы отправляли письма через Gmail, предложат добавить в список контактов в Google Talk или список людей, имеющих доступ к тому или иному документу, в Google Docs\)\. Какое бы устройство Вы в данный момент ни использовали \(ноутбук или обычный телефон с выходом во Всемирную паутину\), сервисы работают настолько быстро, насколько это позволяет скорость интернет\-соединения: ведь вычисления, необходимые для получения результата, проходят на мощнейших серверах и практически не используют ресурсы Вашего компьютера\.

Итак, облачные технологии и облачные вычисления определяют три основных фактора: наличие пула ресурсов, самообслуживание, эластичность и оплата по факту использования\. 

Пул ресурсов: существует мнение, что облаком называется большая виртуализированная инфраструктура\. Данное утверждение является верным\. Облака используют виртуализацию, но виртуализацию с добавленной функциональностью: все физические ресурсы объединены в единый пул\. Эти ресурсы автоматически распределяются между виртуальными ресурсами, которые необходимо динамически разворачивать, масштабировать для выполнения запросов пользователей\. 

Самообслуживание: перед и после того, как ресурсы, необходимые пользователю, развернуты, облако должно предоставлять пользователю возможность управлять ими с помощью средств самообслуживания для того, чтобы, например, преобразовывать их в более выгодные для бизнеса конфигурации\. Таким образом в облаке отпадает необходимость в администраторе ресурсов, выделенных пользователю\. Ресурсы фактически управляются пользователем, логически и физически они контролируются облачной платформой\.

Эластичность заключается в возможности оперативно и автоматически масштабировать виртуальные ресурсы, выделенные пользователю\. 

Модель оплаты по факту использования состоит в том, что пользователь платит только за то, что он использовал\. Это позволяет перенаправить часть ресурсов, ранее использовавшихся для оплаты поддержки и обслуживания, например, периодически простаивающего оборудования, на бизнес\-задачи организации и реализовать ту необходимую гибкость, которая лежит в основе эффективного использования ресурсов\. Экономия очевидна – благодаря объединению ресурсов в пулы и модели оплаты по факту использования многие расходы становятся излишними, их можно избежать, и построить ту инфраструктуру, которая максимально отвечает бизнес\-потребностям организации\.

<a id="_heading=h.3znysh7"></a>Имена и истории

1. Идея облачных вычислений, впервые была озвучена Джозефом Карлом Робнеттом Ликлайдером \(J\.C\.R\. Licklider\)\. Идея Линклайдера заключалась в том, что каждый человек будет подключен к сети, из которой он будет получать не только данные, но и программы\.
2. Джон Маккарти \(John McCarthy\)  – «вычислительные мощности будут предоставляться пользователям как услуга \(сервис\)»
3. начало 90\-х – стремительное развитие сети Интернет, а именно пропускной способности\.
4. 1999 год, компания Salesforce\.com – предоставила доступ к своему приложению через сайт\. «программное обеспечение как сервис» \(SaaS\)\.
5. 2002 год, Amazon  – свой облачный сервис, где пользователи могли хранить информацию и проводить необходимые вычисления\.
6. 2006 год, Amazon – сервис Elastic Compute cloud \(EC2\), где пользователи могли запускать свои собственные приложения\. 
7. 2008 год, Google – Google Apps для веб\-приложений в бизнес секторе\.
8. 2010 год, Google – общедоступный облачный сервис Google Docs\.
9. EUCALYPTUS Elastic Utility

Computing Architecture for Linking Your Programs To Useful Systems

1. 2010 год, OpenStack – операционную платформу для оркестровки крупномасштабных облачных решений\.

Объекты, предметы и артефакты

Анимация \(мультфильмы\):

1. Динамическое распределение сервисов по вычислителям внутри облака
2. Построение виртуальной топологии вычислителей поверх физической топологии
3. Анимация передачи сетевого трафика через географический распределенную сеть вычислителей\. Примечание: с использование карты мира\. 
4. Улучшение качества сервиса \(например, качество видео изображения\) при перемещении источника видео ближе к потребителю \(CDN сервис\)
5. Восстановление данных после выхода из строя одного или нескольких хранилищ данных\.

Интерактивная анимация:

1. Офисные сервисы \(Office 365\)
2. Сервисы предоставления вычислительных ресурсов \(например, Amazon EC2\)
3. Сервисы предоставления хранилищ информации \(например, Яндекс\.Диск, Google\.Drive, DropBox\)
4. Служебные сетевые сервисы \(межсетевой экран, машрутизация\)\.
5. Сервисы предоставление видео контента\.

Теории, законы, гипотезы

1. Виртуализация\. Технология виртуализации повышает эффективность использования вычислительных и сетевых ресурсов благодаря возможности представлять множество виртуальных объектов вместо одного физического\. Кроме того, виртуализация ускоряет развертывание рабочих нагрузок, повышает их производительность и доступность, а также дает возможность автоматизировать многие процессы\. 
2. Сервис\-ориентированная архитектура \(Service\-Oriented Architecture, SOA\)\. SOA – это парадигма, предназначенная для проектирования, разработки и управления сервисов в вычислительной среде\. SOA "подталкивает" к использованию альтернативных технологий и подходов \(таких как обмен сообщениями\) для построения приложений посредством связывания сервисов, а не посредством написания нового программного кода\. В самом общем виде SOA предполагает наличие трех основных участников: поставщика сервиса, потребителя сервиса и реестра сервисов\. Взаимодействие участников описывается достаточно просто: поставщик сервиса регистрирует свои сервисы в реестре, а потребитель обращается к реестру с запросом\.
3. Предоставление приложений в режиме услуг \(Application Service Provider, ASP, Software as a Service, SaaS\)\.  Предоставление приложений в режиме услуг позволяет запускать отдельное приложение в своей собственной изолированной среде \(иногда называется «песочница», sandbox\)\. Такой способ помогает решить множество проблем\. Во\-первых – безопасность: приложение, запущенное в изолированной среде – не способно нанести вред ОС и другим приложениям\. Во\-вторых – все приложения можно обновлять централизованно из одного источника\. В\-третьих –позволяется запускать на одном физическом ПК несколько разных приложений, конфликтующих друг с другом, или даже несколько разных версий одного и того же приложения\.
4. Решения класса «платформа как услуга» \(Platform as a Service, PaaS\)\. PaaS – это программная имитация с помощью специального ПО аппаратного обеспечения компьютера: процессор, память, жесткий диск, и т\.д\. Далее, на такой виртуальный компьютер можно установить операционную систему, и она будет на нем работать точно так же, как и на простом, «железном» компьютере\. Самое интересное достоинство этой технологии – это возможность запуска нескольких виртуальных компьютеров внутри одного «железного», при этом все виртуальные компьютеры могут работать независимо друг от друга\.
5. Решения класса «инфрастуктура как услуга» \(Infrustructure as a Service, IaaS\)\. Виртуализация инфрастуктуры, в отличие от виртуализации платформ, имеет более широкий и расплывчатый смысл и представляет собой массу различных подходов, направленных на повышение удобства обращения пользователей с системами в целом\. Виртуализация инфрастуктуры позволяет концентрировать, абстрагировать и упрощать управление группами ресурсов, таких как сети, хранилища данных и пространства имен\.
6. Управление хранением данных\. Основной задачей такого управления является предоставление возможности положить на облачный диск свои файлы и получить к ним доступ откуда угодно\. Сервис облачного хранилища заключается в получении простого доступа к данным с компьютера или мобильного устройства, повышении уровня защищённости данных, осуществлении автоматической синхронизации данных между разными компьютерами и устройствами пользователя, предоставлении общего или ограниченного доступа к файлам\.
7. Программные API для облачных приложений\. После переноса приложений в облако пользователи ожидают, что эти приложения будут работать не хуже, а по возможности даже лучше прежнего\.  Это относится, прежде всего, к приложениям, чувствительным к задержкам и работающим в реальном времени \(виртуальным десктопам, коммуникациям и конференциям\)\.  Простота внедрения приложений и процессов управления – вот еще два важных критерия высокого качества пользовательских услуг\.  Таким образом, поставщики облачных сервисов должны предоставлять своим заказчикам необходимый уровень контроля за облачной функциональностью в последовательной и непротиворечивой форме через единый портал\.  Интерфейсы API играют центральную роль в выполнении этой задачи\.

Нерешенные задачи, открытые вопросы, перспективы

1. Как автоматизировать процесс управления облачной инфраструктурой?
2. Как построить систему управления хранением данных в облачных системах с учетом обеспечения одновременного доступа к данным множеству клиентов, одновременно с предоставлением гарантии по времени доступа?
3. Как обеспечить информационную изоляцию виртуальных машин и процессов принадлежащих различным пользователям на всех уровнях информационной системы?
4. Как должно организовываться взаимодействие между различными облачными реализациями?
5. Как будет выглядеть единый API для создания программ, работающих в облачной среде, является необходим условием дальнейшего развития IT систем?
6. Мобильные приложения \(iPhone, Android, Tizen\)
7. Обработка и анализ больших массивов, данных \(Big Data\)
8. Дистанционная медицина \(Healthcare Technologies \- The Doctor Is In Blog\) 
9. Вездесущие вычисления \(Pervasive Computing, Ubiquitous Computing\)
10. Умный дом, Умный город, Умное государство \(Smart House, City, State\)
11. Фантастическое развитие человеко\-машинных интерфейсов: тактильные, ментальные, речевые \(haptic, brain\-computer, speach interface\)
12. Осязаемые изображения \(tangible images\)
13. Прогресс в поиске изображений
14. <a id="_heading=h.2et92p0"></a>Услуги Онлайн
15. Коммерческие услуги онлайн достигли своего пика в 1990\-ых, сначала для внутреннего пользования и позже, как способ получить доступ к Интернету\. Эти услуги обеспечили доступ к широкому спектру услуг, которые и сейчас существуют в сети\. Новости, резервирование путешествий, шоппинг и социальные центры были частью пакета услуг; большая часть того, что мы видим сегодня в сети, существовала в некотором виде на тех сайтах\. Социальная коммуникация была большой приманкой для онлайн услуг, поскольку основной источник их дохода был основан на поминутном использовании\. AOL быстро это уловил и позволил пользователям создавать сообщества по любой теме\.
16. Когда услуги онлайн достигали своего пика, сеть стала доступной для обычных пользователей, превращая Интернет в господствующее явление\. Услуги онлайн, в свою очередь, постепенно трансформировались из цели в средство подключения к Интернету\.
17. В это время количество пользователей компьютера быстро росло\. AOL, несмотря на его ошибки, заслуживает большого признания за то, что открыл Интернет для миллионов людей\. Поскольку пользовательское сообщество росло, услуги онлайн начали концентрироваться вокруг более разнообразных заинтересованных групп, не имеющих никакого отношения к компьютерам\. Центр сместился с компьютеров на людей, которые использовали компьютеры, чтобы что\-то сделать\.

